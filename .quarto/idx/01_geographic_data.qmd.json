{"title":"Geographic information","markdown":{"headingText":"Geographic information","containsRefs":false,"markdown":"\n::: callout-note\n**Reading**\n\nEach session there will be some reading to support the taught content. You are not constrained to this reading list and i encourage you to read widely!\n\n-   [GIS and Cartography](https://www.sciencedirect.com/science/article/pii/B9780080449104000341) by Goodchild (2009)\n\n-   [Chapter 2 \"Geographic data in R\"](https://geocompr.robinlovelace.net/spatial-class.html) from Geocomputation with R by Lovelace, Nowosad and Muenchow (2020).\n\n-   [Opening practice: supporting reproducibility and critical spatial data science](https://link.springer.com/article/10.1007/s10109-020-00334-2#Sec3) by Brunsdon and Comber (2020)\n\n**Watching**\n\n-   [What is Spatial Data Science](https://www.youtube.com/watch?v=osAbJeTho5w)\n:::\n\n::: callout-important\nThe task is to join some non spatial data to some spatial data and make a map\n\n-   Go to the [New Zealand spatial data portal](https://datafinder.stats.govt.nz/) and download the file Territorial Authority 2018 (generalised), [these are city or district councils](https://www.localcouncils.govt.nz/lgip.nsf/wpg_url/About-Local-Government-Local-Government-In-New-Zealand-Councils-roles-and-functions#TerritorialAuthorities(District%20and%20City%20Councils)). Make sure it's the Territorial Authority 2018 data **not** SA1.\n\n-   Go to the [Stats NZ website](https://www.stats.govt.nz/information-releases/statistical-area-1-dataset-for-2018-census-updated-march-2020) and download the Statistical area 1 dataset for 2018 for the whole of New Zealand. Download the excel file this week, **not** the `.csv`.\n\n-   Unzip the downloaded census file and open 2018-SA1-dataset-individual-part-2-total-NZ_updated_16-7-20, you will see a tab for Territorial authority. Join the 2018 paid employee field to the spatial data and make a basic map. Hint, you may need to make a new `.csv` file from the data.\n\n-   Make a map of health related data (e.g. smoking, glasses, hearing aid)\n:::\n\nBy the end of this practical you should be able to:\n\n1.  Describe and explain GIS data formats and databases\n2.  Source and pre-process spatial data\n3.  Load and undertaken some basic manipulation of spatial data\n4.  Create some maps\n\n## The Basics of geographic information\n\nGeographic data, geospatial data or geographic information is data that identifies the location of features on Earth. There are two main types of data which are used in GIS applications to represent the real world. **Vectors** that are composed of points, lines and polygons and **rasters** that are grids of cells with individual values...\n\n```{r echo=FALSE, out.width = \"200pt\", fig.align='center', cache=FALSE, fig.cap=\"Types of spatial data. Source: [Spatial data models](https://planet.uwc.ac.za/nisl/gis/web_page/page_15.htm)\"}\nknitr::include_graphics('prac1_images/rasvec.jpg') \n```\n\nIn the above example the features in the real world (e.g. lake, forest, marsh and grassland) have been represented by points, lines and polygons (vector) or discrete grid cells (raster) of a certain size (e.g. 1 x 1m) specifying land cover type.\n\n### Data types in statistics\n\nBefore we go any further let's just quick go over the different types of data you might encounter\n\nContinuous data can be measured on some sort of scale and can have any value on it such as height and weight.\n\nDiscrete data have finite values (meaning you can finish counting something). It is numeric and countable such as number of shoes or the number of computers within the classroom.\n\nFoot length would be continuous data but shoe size would be discrete data.\n\n```{r echo=FALSE, out.width = \"450\", fig.align='center', cache=FALSE, fig.cap=\"Continuous and discrete data. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/continuous_discrete.png')\n```\n\nNominal (also called categorical) data has labels without any quantitative value such as hair colour or type of animal. Think names or categories - there are no numbers here.\n\nOrdinal, similar to categorical but the data has an order or scale, for example if you have ever seen the chilli rating system on food labels or filled a happiness survey with a range between 1 and 10 --- that's ordinal. Here the order matters, but not the difference between them.\n\nBinary data is that that can have only two possible outcomes, yes and no or shark and not shark.\n\n```{r echo=FALSE, out.width = \"550pt\", fig.align='center', cache=FALSE, fig.cap=\"Nominal, ordinal and binary data. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/nominal_ordinal_binary.png')\n```\n\n### Important GIS data formats\n\nThere are a number of commonly used geographic data formats that store vector and raster data that you will come across during this course and it's important to understand what they are, how they represent data and how you can use them.\n\n#### Shapefiles\n\nPerhaps the most commonly used GIS data format is the shapefile. Shapefiles were developed by [ESRI](http://www.esri.com/), one of the first and now certainly the largest commercial GIS company in the world. Despite being developed by a commercial company, they are mostly an open format and can be used (read and written) by a host of GIS Software applications.\n\nA shapefile is actually a collection of files ---- at least three of which are needed for the shapefile to be displayed by GIS software. They are:\n\n1.  `.shp` - the file which contains the feature geometry\n2.  `.shx` - an index file which stores the position of the feature IDs in the `.shp` file\n3.  `.dbf` - the file that stores all of the attribute information associated with the coordinates -- this might be the name of the shape or some other information associated with the feature\n4.  `.prj` - the file which contains all of the coordinate system information (the location of the shape on Earth's surface). Data can be displayed without a projection, but the `.prj` file allows software to display the data correctly where data with different projections might be being used\n\nOn Twitter and want to see the love for shapefiles....have a look at [the shapefile account](https://twitter.com/shapefiIe)\n\n#### GeoJSON\n\nGeoJSON [Geospatial Data Interchange format for JavaScript Object Notation](http://geojson.org/) is becoming an increasingly popular spatial data format, particularly for web-based mapping as it is based on JavaScript Object Notation. Unlike a shapefile in a GeoJSON, the attributes, boundaries and projection information are all contained in the same file.\n\n#### Raster data\n\nMost raster data is now provided in GeoTIFF (`.tiff`) format, which stands for Geostarionary Earth Orbit Tagged Image File. The GeoTIFF data format was created by NASA and is a standard public domain format. All necesary information to establish the location of the data on Earth's surface is embedded into the image. This includes: map projection, coordinate system, ellipsoid and datum type.\n\n#### Geodatabase\n\nA geodatabase is a collection of geographic data held within a database. Geodatabases were developed by ESRI to overcome some of the limitations of shapefiles. They come in two main types: Personal (up to 1 TB) and File (limited to 250 - 500 MB), with Personal Geodatabases storing everything in a Microsoft Access database (`.mdb`) file and File Geodatabases offering more flexibility, storing everything as a series of folders in a file system. In the example below we can see that the FCC_Geodatabase (left hand pane) holds multiple points, lines, polygons, tables and raster layers in the contents tab.\n\n```{r echo=FALSE, out.width = \"500pt\", fig.align='center', cache=FALSE}\nknitr::include_graphics('prac1_images/geodatabase.png') \n```\n\n#### GeoPackage\n\n```{r echo=FALSE, out.width = \"100pt\", fig.align='center', cache=FALSE, fig.cap=\"GeoPacakge logo\"}\nknitr::include_graphics('prac1_images/geopkg.png')\n```\n\nA GeoPackage is an open, standards-based, platform-independent, portable, self-describing, compact format for transferring geospatial data. It stores spatial data layers (vector and raster) as a single file, and is based upon an SQLite database, a widely used relational database management system, permitting code based, reproducible and transparent workflows. As it stores data in a single file it is very easy to share, copy or move.\n\n#### SpatiaLite\n\n```{r echo=FALSE, out.width = \"100pt\", fig.align='center', cache=FALSE, fig.cap=\"SpatialLite logo\"}\nknitr::include_graphics('prac1_images/spatialite.png')\n```\n\nSpatialLite is an open-source library that extends SQLite core. Support is fairly limited and most software that supports SpatiaLite also supports GeoPackage, as they both build upon SQLite. It doesn't have any clear advantage over GeoPackage, however it is unable to support raster data.\n\n#### PostGIS\n\n```{r echo=FALSE, out.width = \"100pt\", fig.align='center', cache=FALSE, fig.cap=\"PostGIS logo\"}\nknitr::include_graphics('prac1_images/postGIS.jpg') \n```\n\nPostGIS is an opensource database extender for PostrgeSQL. Essentially PostgreSQL is a database and PostGIS is an add on which permits spatial functions. The advantages of using PostGIS over a GeoPackage are that it allows users to access the data at the same time, can handle large data more efficiently and reduces processing time. In [this example](https://medium.com/@GispoLearning/learn-spatial-sql-and-master-geopackage-with-qgis-3-16b1e17f0291) calculating the number of bars per neighbourhood in Leon, Mexico the processing time reduced from 1.443 seconds (SQLite) to 0.08 seconds in PostGIS. However, data stored in PostGIS is much harder to share, move or copy.\n\n#### What will I use\n\nThe variety of data formats can see a bit overwhelming. I still have to check how to load some of these data formats that I don't use frequently. But don't worry, most of the time you'll be using shapefiles, GeoPackages or raster data.\n\n## General data flow\n\nAs Grolemund and Wickham state in [R for Data Science](https://r4ds.had.co.nz/)...\n\n> \"Data science is a huge field, and there's no way you can master it by reading a single book.\"\n\nHowever, a nice place to start is looking at the typical workflow of a data science (or GIS) project which you will see throughout these practicals, which is summarised nicely in this diagram produced by [Dr. Julia Lowndes](https://twitter.com/juliesquid) adapted from Grolemund and Wickham.\n\n```{r echo=FALSE, out.width = \"600pt\", fig.align='center', cache=FALSE, fig.cap=\"Updated from Grolemund & Wickham's classis R4DS schematic, envisioned by Dr. Julia Lowndes for her 2019 useR! keynote talk and illustrated by Allison Horst. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/environmental_data_science_r4ds_general.png')\n```\n\nTo begin you have to **import** your data (not necessarily environmental) into R or some other kind of GIS to actually be able to do any kind of analysis on it.\n\nOnce imported you might need to **tidy** the data. This really depends on what kind of data it is and we cover this later on in the course. However, putting all of your data into a consistent structure will be very beneficial when you have to do analysis on it --- as you can treat it all in the same way. Grolemund and Wickham state that data is tidy when \"each column is a variable, and each row is an observation\", we cover this more in next week in the \\[Tidying data\\] section.\n\nWhen you have (or haven't) tidied data you then will most likely want to **transform** it. Grolemund and Wickham define this as \"narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing speed from distance and time), and calculating a set of summary statistics (like counts or means)\". However, from a GIS point of view I would also include putting all of your data into a similar projection, covered next week in \\[Changing projections\\] and any other basic process you might do before the core analysis. Arguably these processes could include things such as: clipping (cookie cutting your study area), buffering (making areas within a distance of a point) and intersecting (where two datasets overlap).\n\nTidying and transform = data wrangling. Remember from the introduction this could be 50-80% of a data science job!\n\n```{r echo=FALSE, out.width = \"450pt\", fig.align='center', cache=FALSE, fig.cap=\"dplyr introduction graphic. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/dplyr_wrangling.png')\n```\n\nAfter you have transformed the data the next best thing to do is **visualise** it --- even with some basic summary statistics. This simple step will often let you look at your data in a different way and select more appropriate analysis.\n\nNext up is **modelling**. Personally within GIS i'd say a better term is processing as the very data itself is usually a computer model of reality. The modelling or processing section is where you conduct the core analysis (more than the basic analysis already mentioned) and try to provide an answer to your research question.\n\nFinally you have to **communicate** your study and outputs, it doesn't matter how good your data wrangling, modelling or processing is, if your intended audience can't interpret it, well, it's pretty much useless.\n\n## UK spatial geography\n\nIn this practical we are going to take some regular data (without any geometry) and join it to a spatial data set so we can map it!\n\nFirstly we need spatial data. It can be quite a daunting task to attempt to understand all of the boundaries that are in use in England and Wales....briefly:\n\n**Statistical hierarchy**\n\n-   Statistical hierarchy are units that census data is collected, the smallest being an output area with around 100 residents.\n\n-   Output areas can be aggregated to Lower Super Output Areas (LSOAs) with between 1,000 and 3,000 residents. These can be further aggregated to Middle Super Output Areas (MSOAs).\n\n-   Output areas and LSOAs typically fit within administrative electoral wards (below)...\n\n-   Wards and MSOAs fit within local authority areas\n\n[![Nesting areas](prac1_images/nesting.png){fig-align=\"center\" width=\"500\"}](https://www.towerhamlets.gov.uk/Documents/Borough_statistics/Research-tools-and-guidance/RB-Census2011-Census-Geography-Guide-2013-05.pdf)\n\n[![Nesting example](prac1_images/nesting2.png){fig-align=\"center\" width=\"400\"}](https://ukdataservice.ac.uk/learning-hub/census/other-information/census-boundary-data/)\n\n-   Note that all the boundaries can change (e.g. Some LSOAs between the 2011 census and 2021 census moved). To account for this we can use lookup tables to match the new areas with the old ones.\n\n**Administarive hierarchy**\n\n-   Administrative areas are based on government areas and this depends on where you are in England....\n\n[![A Beginner's Guide to UK Geography](prac1_images/admin_flow.png){fig-align=\"center\" width=\"500\"}](https://geoportal.statistics.gov.uk/documents/ons::a-beginners-guide-to-uk-geography-2021-v1-0-1/explore)\n\n-   Some parts of England have a two tier structure. Counties take on expensive services - such as education and transport. Whilst local authority districts took on smaller services - such as planning permission, markets and local roads. Under all of this are electoral wards that have local Councillors...\n\n-   In 1974 a two tier system of counties and districts was enacted across England and Wales. In urban areas these were metropolitan counties and metropolitan districts..\n\n-   But in 1986 the metropolitan counties were removed (although still recognised) and the metropolitan districts were left as a single authority.\n\n-   From 1990 many of the tier structures (not in metropolitan areas) were combined into a single structure called Unitary Authorities, especially in medium-sized urban areas. However, some still retained the two tier structure.\n\nAn [easy to read guide on census / administrative geography](https://www.towerhamlets.gov.uk/Documents/Borough_statistics/Research-tools-and-guidance/RB-Census2011-Census-Geography-Guide-2013-05.pdf) was produced by the London Borough of Tower Hamlets - skip to page 2 for a visual summary.\n\n## R Spatial data intro\n\nR has a very well developed ecosystem of packages for working with Spatial Data. Early pioneers like Roger Bivand and Edzer Pebesma along with various colleagues were instrumental in writing packages to interface with some powerful open source libraries for working with spatial data, such as GDAL and GEOS. These were accessed via the `rgdal` and `rgeos` packages. The `maptools` package by Roger Bivand, amongst other things, allowed Shapefiles to be read into R. The `sp` package (along with `spdep`) by Edzer Pebesma was very important for defining a series of classes and methods for spatial data natively in R which then allowed others to write software to work with these formats. Many these original packages were retired (and superseded by the ones we will use today) at the end of 2023 as their maintainer Roger Bivand also retired. Other packages like `raster` advanced the analysis of gridded spatial data, while packages like `classInt` and `RColorbrewer` facilitated the binning of data and colouring of choropleth maps.\n\nWhilst these packages were extremely important for advancing spatial data analysis in R, they were not always the most straightforward to use --- making a map in R could take quite a lot of effort and they were static and visually basic. However, more recently new packages have arrived to change this. Now `leaflet` enables R to interface with the leaflet javascript library for online, dynamic maps. `ggplot2` which was developed by Hadley Wickham and colleagues radically changed the way that people thought about and created graphical objects in R, including maps, and introduced a graphical style which has been the envy of other software to the extent that there are now libraries in Python which copy the `ggplot2` style!\n\n```{r echo=FALSE, out.width = \"450pt\", fig.align='center', cache=FALSE, fig.cap=\"ggplot2 introduction graphic. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/ggplot2_exploratory.png')\n```\n\nBuilding on all of these, the new `tmap` (Thematic Map) package has changed the game completely and now enables us to read, write and manipulate spatial data and produce visually impressive and interactive maps, very easily. In parallel, the `sf` (Simple Features) package is helping us re-think the way that spatial data can be stored and manipulated. It’s exciting times for geographic information / spatial data science!\n\n### Spatial data projections\n\nSpatial data must be located somewhere on Earth and we need to represent this! We do this with Coordinate Reference Systems, shortened to CRS or often sometimes projections (although a projection is just one part of a coordinate reference system).\n\nProjections systems are mathematical formulas that specify how our data is represented on a map. These can either be call geographic coordiate reference systems or projected coordinate reference systems. The former treats data as a sphere and the latter as a flat object. You might come across phrases such as a resolution of 5 minutes or a resolution of 30 metres, which can be used to establish what kind of projection system has been used. Let me explain...\n\nA minute type of resolution (e.g. 5 minute resolution) is a geographic reference system that treats the globe as if it was a sphere divided into 360 equal parts called degrees (which are angular units). Each degree has 60 minutes and each minute has 60 seconds. Arc-seconds of latitude (horizontal lines in the globe figure below) remain almost constant whilst arc-seconds of longitude (vertical lines in the globe figure below) decrease in a trigonometric cosine-based fashion as you move towards the Earth's poles...\n\n```{r echo=FALSE,  out.width=\"49%\", fig.align='center', cache=FALSE, fig.cap=\"Latitude and Longitude. Source: [ThoughtCo.](https://www.thoughtco.com/degree-of-latitude-and-longitude-distance-4070616)\"}\nknitr::include_graphics('prac1_images/arcseconds.jpg')\n```\n\nThis causes problems as you increase or decrease latitude the longitudinal lengths alter...For example at the equator (0°, such as Quito) a degree is 111.3 km whereas at 60° (such as Saint Petersburg) a degree is 55.80 km ...\n\n**In contrast** a projected coordinate system is defined on a flat, two-dimensional plane (through projecting a spheroid onto a 2D surface) giving it constant lengths, angles and areas...\n\n```{r vectorplots, fig.cap=\"Illustration of vector (point) data in which location of London (the red X) is represented with reference to an origin (the blue circle). The left plot represents a geographic CRS with an origin at 0° longitude and latitude. The right plot represents a projected CRS with an origin located in the sea west of the South West Peninsula. Source: [Lovelace et al. (2019) section 2.2](https://geocompr.robinlovelace.net/spatial-class.html)\", out.width=\"49%\", fig.show='hold', echo=FALSE, cache=FALSE}\nknitr::include_graphics(c(\"prac1_images/vector_lonlat.png\",\"prac1_images/vector_projected.png\"))\n```\n\nKnowing this, if we want to conduct analysis locally (e.g. at a national level) or use metric (e.g. kilometres) measurements we need to be able to change the projection of our data or \"reproject\" it. Most countries and even states have their own projected coordinate reference system such as British National Grid in the above example...Note how the origin (0,0) is has moved from the centre of the Earth to the bottom South West corner of the UK, which has now been ironed (or flattened) out.\n\n::: callout-important\n**Projection rules**\n\nUnits are angular (e.g. degrees, latitude and longitude) or the data is global = Geographic coordinate reference system\n\nUnits are linear (e.g. feet, metres) or data is at a local level (e.g. national, well the last one is not always true, but likely) = Projected coordinate reference system.\n:::\n\n\\\nYou might hear some key words about projections that could terrify you! Let's break them down:\n\n-   Ellipsoid (or spheroid) = size of shape of the Earth (3d)\n-   Datum = contains the point relationship (where the origin (0,0) of the map is) between a Cartesian coordinates (flat surface) and Earth's surface. They can be local or geocentric (see below). They set the origin, the scale and orientation of the Coordiante Reference System (CRS).\n-   Local datum = changes the Ellipsoid to align with a certain location on the surface (e.g. BNG that uses the OSGB36 datum). A local datum is anything that isn't the centre of the Earth.\n-   Geocentric datum = the centre is equal to the Earth's centre of gravity (e.g. WGS84).\n-   Geodetic datum = global datum (see above for datum meaning) for representing features (e.g. points and polygons) on earth\n-   Geodesy (from which we get Geodetic) = measuring Earth's shape and features (e.g. gravity field).\n-   Coordinate reference system (CRS) = Formula that defines how the 2D map (e.g. on your screen or a paper map) relates to the 3D Earth. Sometimes called a spatial Reference System (SRS). It also stores the datum information.\n\n::: callout-tip\n**Take home message**\n\nWhen you do analysis on multiple datasets make sure they are all use the same Coordinate Reference System.\n\nIf it's local (e.g. city of country analysis) then use a local projected CRS where possible.\n:::\n\n### Data download\n\nOk, after all that theory we can start downloading data! In this case we will be joining the \"health in general\" question from the 2021 census to LSOAs in London (although you could select any area).\n\nMake a new R project and **put this data into a data folder**\n\nThe health data be accessed either from:\n\n-   [The ONS](https://www.ons.gov.uk/datasets/TS037/editions/2021/versions/3/filter-outputs/a3b1f055-4604-47a1-bcb6-c9d831f5f2e8#summary). **Note** make sure you have selected the right area (in our case LSOA).\n\n-   [The London data store](https://data.london.gov.uk/dataset/2021-census-lsoa-qualifications-health-disability-and-care). Note this is excel data and the function we would need is `read_excel(excel document, sheet number)`\n\nOur spatial data can also be accessed from either:\n\n-   [The ONS](https://geoportal.statistics.gov.uk/datasets/766da1380a3544c5a7ca9131dfd4acb6/explore)\n\n-   [The London data store](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london)\n\nIn this example i will use the health data from the ONS and spatial data from the London Datastore.\n\nFirst, load the packages we need:\n\n```{r, warning=FALSE, message=FALSE}\nlibrary(sf)\nlibrary(tidyverse)\n```\n\nThen our data...\n\n```{r, warning=FALSE, message=FALSE, echo=TRUE, results='hide'}\n# spatial data\n\nLSOAs <- sf::st_read(\"prac1_data/statistical-gis-boundaries-london/ESRI/LSOA_2011_London_gen_MHW.shp\")\n\n# health data\n  \nhealth <- readr::read_csv(\"prac1_data/TS037-2021-3-filtered-2024-01-24T17_28_55Z.csv\")  \n```\n\nTo check our spatial data let's make a quick map with the thematic maps pacakge (`tmap`) this works on the grammar of graphics (famous from `ggplots`), similar to the grammar of data manipulation (`tidyverse`) it works on a layered approach. Here we specify the dataset and then how we want to style it..In the most basic form...\n\n```{r}\nlibrary(tmap)\n# plot or view - view will make it interactive\ntmap_mode(\"plot\")\n# load the sf object\ntm_shape(LSOAs) +\n  # style it with polygons.\n  tm_polygons(col = NA, alpha = 0.5)\n```\n\n### Wrangle\n\nBefore progressing it's also good practice to standardise our column names...we can do so with the `janitor` package...\n\n```{r echo=FALSE, out.width = \"500pt\", fig.align='center', cache=FALSE, fig.cap=\"janitor::clean_names() example. Source: [Allison Horst data science and stats illustrations](https://github.com/allisonhorst/stats-illustrations)\"}\nknitr::include_graphics('allisonhorst_images/janitor_clean_names.png')\n```\n\n```{r, warning=FALSE, message=FALSE}\nlibrary(janitor)\n\nLSOAs <- janitor::clean_names(LSOAs)\n\nhealth <- janitor::clean_names(health)\n```\n\nNext we need to join the health data to the spatial data...to do so need to identify a unique column in each dataset to perform the join on, such as a code for the LSOAs (e.g. lsoa11cd and lower layer super output areas code ).\n\nOnce we have the code we can select a join type...\n\n```{r echo=FALSE, out.width = \"500px\", fig.align='center', cache=FALSE, fig.cap=\"SQL join types. Source: [SQL Join Diagram, dofactory](https://www.dofactory.com/sql/join)\"}\nknitr::include_graphics('prac1_images/sql-joins.png') \n```\n\nTypically in spatial analysis we use a left join - this retains everything in th left data (which is our spatial data set) and joins data from the right only where there are matches\n\n```{r echo=FALSE, out.width = \"500px\", fig.align='center', cache=FALSE, fig.cap=\"dplyr::left_join() example. Source: [Tidy explain by Garrick Aden‑Buie](https://www.garrickadenbuie.com/project/tidyexplain/)\"}\nknitr::include_graphics('prac1_images/left-join.gif') \n```\n\n-   If there are multiple matches then a new row is created (e.g. If there were two health rows for a single LSOA)\n\n-   If there are no matches then the data is dropped (e.g. the LSOAs not in London)\n\n```{r echo=FALSE, out.width = \"500px\", fig.align='center', cache=FALSE, fig.cap=\"dplyr::left_join() example. Source: [Tidy explain by Garrick Aden‑Buie](https://www.garrickadenbuie.com/project/tidyexplain/)\"}\nknitr::include_graphics('prac1_images/left-join-extra.gif') \n```\n\n```{r, warning=FALSE}\njoined_data <- LSOAs %>%\n  left_join(., \n            health,\n            by = c(\"lsoa11cd\" = \"lower_layer_super_output_areas_code\"))\n```\n\n### Long vs wide data\n\nYou will get a warning saying that each row in x (the spatial data) was expected to match just 1 y row. However, our health data is long data (also called tidy data). This differs from \"regular\" wide data as...\n\n1.  Each variable must have its own column.\n\n2.  Each observation must have its own row.\n\n3.  Each value must have its own cell.\n\n```{r echo=FALSE, out.width = \"500px\", fig.align='center', cache=FALSE, fig.cap=\"This figure is taken directly from Grolemund and Wickham (2017) Chapter 12.Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Source: [KSK analytics](https://www.ksk-anl.com/blog/hadley-wickhams-tidy-data-in-rapidminer-part-1/)\"}\nknitr::include_graphics('prac1_images/messy-tidy-ex.png') \n```\n\nTypically in GIS we need our data messy (or wide) where the variables have their own column and each row is an area.\n\nTo so do first we must make the data into a `tibble`..\n\n```{r echo=FALSE, out.width = \"450px\", fig.align='center', cache=FALSE, fig.cap=\"Data Object Type and Structure. Source: [ Exploratory Data Analysis in R, Gimond 2022](https://mgimond.github.io/ES218/Week02a.html#Data_structures)\"}\nknitr::include_graphics('prac1_images/data_structures2.png') \n```\n\nWe should reflect on data types in R, which will influence the structure we select. Note a tibble is very similar (the same!) to a dataframe, expect you are provided with additional information when printing.\n\n```{r}\nlibrary(tidyr)\n\njoined_data_wide <- joined_data %>%\n  as_tibble(.)%>%\n  select(lsoa11cd, general_health_6_categories, observation, usualres, hholdres, popden)%>%\n  tidyr::pivot_wider(.,\n#    id_cols=1:8,\n    names_from = general_health_6_categories,\n    values_from = observation)%>%\n    clean_names(.)\n```\n\nWhen we make the tibble we lose the geometry column and so our data becomes non spatial again...really we could have done our wrangling first and then conducted a join! This will create a bit of a mess with columns too (as we already have some), so we will need to select the ones we want...\n\n```{r}\njoined_data_wide_joined <- LSOAs %>%\n  left_join(., \n            joined_data_wide,\n            by = c(\"lsoa11cd\" = \"lsoa11cd\"))%>%\n    select(lsoa11cd, msoa11cd, usualres.x, hholdres.x, popden.x, does_not_apply, very_good_health, good_health, fair_health, bad_health, very_bad_health)\n\n```\n\n### Map\n\nOnce we have the wide data we can compute other metrics - this is especially important for mapping as we must never map count data, unless the spatial units are the same size (e.g. hexagons). Instead we should normalise our data using some kind of common denominator....for example percent of usual residents with bad health...where the number of usual residents will vary across the spatial units.\n\n```{r}\njoined_data_wide_joined_map <- joined_data_wide_joined%>%\n  mutate(percent_very_bad = (very_bad_health/usualres.x)*100)%>%\n  mutate(percent_very_bad = round(percent_very_bad, digits=2))\n\n```\n\nMake a basic map!\n\n```{r}\n# select the sf object to map\ntm1 <- tm_shape(joined_data_wide_joined_map) + \n  # select what column to map\n  tm_polygons(\"percent_very_bad\", \n              # set a palette \n              palette=\"PuBu\")\n\ntm1\n```\n\nThere are some basic issues with our map that we can resolve...\n\n1.  The legend is covering the data and is using the object name (with underscores)\n2.  No scale bar\n3.  The LSOAs are fairly small and so it can be challenging to interpret them\n\n```{r}\nlibrary(tmap)\n\ntm1 <- tm_shape(joined_data_wide_joined_map) + \n  # select what column to map\n  tm_polygons(\"percent_very_bad\", \n              # set a palette \n              palette=\"PuBu\",\n              # how the data should be divided\n              style=\"jenks\",\n              # legend title\n              title = \"\")+\n  \n  tm_compass(position = c(\"left\", \"top\"), size = 2)+\n  \n  tm_layout(main.title=\"% of population with very bad health\",\n          legend.outside=FALSE, \n          frame = TRUE, \n          legend.position = c(0.8,0),\n          legend.text.size = 1)+\n\n  # tm_layout(legend.outside.size = FALSE, \n  #            legend.position= c(\"right\", \"top\"))+\n  tm_scale_bar(position=c(0,0.03), text.size = 1) +\n  \n  tm_credits(\"Data source: ONS and London Data store\",\n          position=c(0,0), \n          size = 0.8, \n          align=\"left\") \n\n\ntm1\n```\n\nTo export the map...\n\n```{r, message=FALSE}\ntmap_save(tm1, 'very bad health.png')\n```\n\nThis hasn't solved the LSOA issue - whereby the map is challenging to read due to the spatial units used. We can consider aggregating our units to MSOA as that column is provided within the LSOA data...\n\nTo do so we'd need to:\n\n1.  Aggregate our current data\n2.  Load the MSOA spatial data, then join and map as above.\n\nTo aggregate the data we use a function called `group_by()` which is always followed by `summarise()`. Group by places our data into groups based on a selected column (e.g. MSOA) and then summarises the data for each group (e.g. number of people with very bad health)\n\n```{r}\nMSOA_data <- joined_data_wide_joined_map %>%\n  as_tibble(.)%>%\n  select(-lsoa11cd, -geometry, -percent_very_bad)%>%\n  group_by(msoa11cd)%>%\n  summarise_all(sum)\n```\n\nIn the above code `select(-variable)` means drop that variable, this has allowed me to use the `summarise_all()` function as opposed to just `summarise()`. Now each column is aggregated to MSOA!\n\nCalculate the percentages\n\n```{r}\nMSOA_data_percent <- MSOA_data%>%\n  mutate(percent_very_bad = (very_bad_health/usualres.x)*100)%>%\n  mutate(percent_very_bad = round(percent_very_bad, digits=2))\n\n```\n\nRead in the MSOA spatial data\n\n```{r}\nMSOAs <- sf::st_read(\"prac1_data/statistical-gis-boundaries-london/ESRI/MSOA_2011_London_gen_MHW.shp\")%>%\n  clean_names(.)\n\n```\n\nJoin...\n\n```{r}\nMSOA_joined <- MSOAs %>%\n  left_join(., \n            MSOA_data_percent,\n            by = c(\"msoa11cd\" = \"msoa11cd\"))%>%\n    select(msoa11cd, msoa11cd, usualres, hholdres, popden, does_not_apply, very_good_health, good_health, fair_health, bad_health, very_bad_health, percent_very_bad)\n```\n\nMap the MSOAs\n\n```{r}\n\ntm2 <- tm_shape(MSOA_joined) + \n  # select what column to map\n  tm_polygons(\"percent_very_bad\", \n              # set a palette \n              palette=\"PuBu\",\n              # how the data should be divided\n              style=\"jenks\",\n              # legend title\n              title = \"\")+\n  \n  tm_compass(position = c(\"left\", \"top\"), size = 2)+\n  \n  tm_layout(main.title=\"% of population with very bad health\",\n          legend.outside=FALSE, \n          frame = TRUE, \n          legend.position = c(0.8,0),\n          legend.text.size = 1)+\n\n  # tm_layout(legend.outside.size = FALSE, \n  #            legend.position= c(\"right\", \"top\"))+\n  tm_scale_bar(position=c(0,0.03), text.size = 1) +\n  \n  tm_credits(\"Data source: ONS and London Data store\",\n          position=c(0,0), \n          size = 0.8, \n          align=\"left\") \n\n\ntm2\n```\n\nPlot them together...\n\n```{r}\nt=tmap_arrange(tm1, tm2, ncol=2)\n\nt\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"01_geographic_data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"01_geographic_data.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}